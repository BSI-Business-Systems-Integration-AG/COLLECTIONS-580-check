package com.bsiag.cve_2015_4852.detection;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.Serializable;
import java.io.UnsupportedEncodingException;
import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.net.URL;
import java.security.CodeSource;
import java.security.ProtectionDomain;

import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

public class DetectServlet extends HttpServlet {

	private static final String ENCODING = "UTF-8";
	private static final long serialVersionUID = 1L;

	@Override
	protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws IOException {
		doCheck(resp.getOutputStream());
	}

	@Override
	protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws IOException {
		doCheck(resp.getOutputStream());
	}

	public static void main(String[] args) throws UnsupportedEncodingException {
		ByteArrayOutputStream response = new ByteArrayOutputStream();
		new DetectServlet().doCheck(response);
		System.out.println(new String(response.toByteArray(), ENCODING));
	}

	protected void doCheck(OutputStream response) {
		PrintWriter out = null;
		try {
			out = new PrintWriter(new OutputStreamWriter(response, ENCODING));
			out.write("<html>");
			out.write("Checking for commons collection security bug <a href='https://issues.apache.org/jira/browse/COLLECTIONS-580'>COLLECTIONS-580</a><br>");
			out.write("Scanning container for 'org.apache.commons.collections.functors.InvokerTransformer'<br><br>");

			Class<?> invokerTransformer = getInvokerTransformer(out);
			
			if (invokerTransformer == null) {
				printSafe(out, "No InvokerTransformer found.");
			} else {
				// class is available. Check if it is vulnerable
				if (!Serializable.class.isAssignableFrom(invokerTransformer)) {
					// fixed non-serializable collections4 version
					printSafe(out, "Fixed collections4 version found (not serializable anymore)");
				} else if (!canBeDeserialized(invokerTransformer)) {
					// fixed 3.2.2 version
					printSafe(out, "Fixed Version found (3.2.2 or newer)");
				} else {
					printUnsafe(out);
				}
				
				printLocation(invokerTransformer, out);				
			}
		} catch (Throwable t) {
			printStackTrace(t, out);
		} finally {
			if (out != null) {
				out.write("</html>");
				out.close();
			}
		}
	}

	protected void printLocation(Class<?> c, PrintWriter out) {
		try {
			ProtectionDomain protectionDomain = c.getProtectionDomain();
			if (protectionDomain != null) {
				CodeSource codeSource = protectionDomain.getCodeSource();
				if (codeSource != null) {
					URL location = codeSource.getLocation();
					if (location != null) {
						out.print("Location: " + location.toExternalForm() + "<br/>");
					}
				}
			}
		} catch (Throwable t) {
			printStackTrace(t, out);
		}
	}

	protected boolean canBeDeserialized(Class<?> invokerTransformer)
			throws SecurityException, NoSuchMethodException, IllegalArgumentException, IllegalAccessException,
			InvocationTargetException, IOException, ClassNotFoundException, InstantiationException {

		Constructor<?> ctor = invokerTransformer.getConstructor(String.class, Class[].class, Object[].class);
		Object transformer = ctor.newInstance("test", null, null);
		if (transformer == null) {
			throw new IllegalArgumentException();
		}
		Object result = null;
		try {
			byte[] raw = serializeInstance(transformer);
			result = deserialize(raw);
		} catch (UnsupportedOperationException e) {
			// ok, patched version
		}
		return result != null;
	}

	protected Object deserialize(byte[] raw) throws IOException, ClassNotFoundException {
		ByteArrayInputStream bais = null;
		ObjectInputStream in = null;
		try {
			bais = new ByteArrayInputStream(raw);
			in = new ObjectInputStream(bais);
			return in.readObject();
		} finally {
			if (bais != null) {
				bais.close();
			}
			if (in != null) {
				in.close();
			}
		}
	}

	protected byte[] serializeInstance(Object o) throws IOException {
		ByteArrayOutputStream baos = null;
		ObjectOutputStream out = null;
		try {
			baos = new ByteArrayOutputStream();
			out = new ObjectOutputStream(baos);
			out.writeObject(o);
			out.flush();
			return baos.toByteArray();
		} finally {
			if (baos != null) {
				baos.close();
			}
			if (out != null) {
				out.close();
			}
		}
	}

	protected Class<?> getInvokerTransformer(PrintWriter out) {
		Class<?> result = null;
		try {
			result = Class.forName("org.apache.commons.collections.functors.InvokerTransformer");
			out.print("Invoker transformer found<br>");
		} catch (ClassNotFoundException e) {
			try {
				result = Class.forName("org.apache.commons.collections4.functors.InvokerTransformer");
				out.print("Invoker transformer found (collections4)<br>");
			} catch (ClassNotFoundException e1) {
				// not found which is good :)
			}
		}
		return result;
	}

	protected void printUnsafe(PrintWriter out) {
		out.print("<span style=\"color: red; font-weight:bolder\">Warging: This container is vulnerable!</span><br/>");
	}

	protected void printSafe(PrintWriter out, String reason) {
		out.print("<span style=\"color: green; font-weight:bolder\">This container is save.</span><br/>");
		if (reason != null) {
			out.print(reason);
			out.print("<br/>");
		}
	}

	protected void printStackTrace(Throwable t, PrintWriter out) {
		ByteArrayOutputStream baos = null;
		PrintStream ps = null;
		try {
			baos = new ByteArrayOutputStream();
			ps = new PrintStream(baos, true, ENCODING);
			t.printStackTrace(ps);
			String stacktrace = new String(baos.toByteArray(), ENCODING);
			String nl = System.getProperty("line.separator");
			out.write(stacktrace.replace(nl, "<br/>"));
		} catch (Throwable tt) {
			tt.printStackTrace(out);
		} finally {
			if (baos != null) {
				try {
					baos.close();
				} catch (IOException e) {
				}
			}
			if (ps != null) {
				ps.close();
			}
		}
	}
}
